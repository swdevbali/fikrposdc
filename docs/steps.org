
FikrPOS : An Elegant Cloud Based Point of Sales Solution for You
* Technologies
** Server Python on Redhat Openshift
Komponen
   Menerima kiriman rekap transaksi harian
   Menyediakan data terpusat dari laporan transaksi semua branches.  
   Menampilkan laporan secara grafik yang informatif
   Menggunakan Pyramid + PostgreSQL di Herokuapp
   Berkomunikasi ke klien via JSON
** Klien C# Desktop run on Windows
  Mengirimkan data transaksi ke pusat
  Berkomunikasi ke server via JSON

* User Cards
** DONE [001] Aplikasi Fikrposdc run locally and synched to Cloud, vice versa
   Aplikasi sudah bisa berjalan baik secara lokal/cloud : db dibuat setiap run
   Dari server sudah bisa ngedump ke lokal, dan sudah bisa diimport di klien : ini tidak perlu lagi, karena ada db.create_all() dari SQLAlchemy
   
** DONE [002] Users CRUD
** DONE [005] Gunakan Admin Dashboard
** DONE [006] Tambahkan konsep Company, sehingga aplikasi ini bisa menjadi solusi cloud
** DONE [003] Branch management
   Diperlukan untuk tempat penyimpanan semua data transaksi/reporting dari branch
   Tiap branch akan punya user yang menjadi admin dari branch ini (attach ke user)   
   Saat pengiriman, token yang harus dikirimkan adalah username + password + branch_id, akan gagal jika user tidak menjadi admin dari branch tersebut [004]
   Banyak branch.. satu user aja. Satu user hanya boleh manage satu branch   
** DONE [007] Scenario pemakai baru : register user dan register company
*** DONE [008] Create a homepage first, then the current / (index) will be use as /home
*** DONE [009] Understanding Layout better
*** DONE [010] Signup    
*** [012] Signout
** DONE [009] Full client<->cloud life-cycle of DailyCashFlow
**** DONE Start with Unittest, action to create ReportModel, populate with each branches periodical sales report. DailyCashFlow introduced! From that model, I think we can generate weekly, yearly, etc. PENDING
**** DONE Prepare simple table for accumulated report in database
**** DONE Using sample data, displayed in chart
**** DONE Now, work on the client and try to create these data, sent this data to server
     Emulate POST request from within this webapp first
***** REST API ...
**** DONE Server must be able to receive those data and stored it, ready to be queried by dashboard interface
** DONE [008] Scenario signin
*** DONE [015] Buat signin spt navbar twitter. Jika benar, langsung ke dashboard. Jika salah, arahkan ke page khusus signup dengan alert errornya. Selain itu, twitter juga bs tuh signup langsung dari homepage. Jadi, u/ signup memang ga mesti dari satu form aja.. Ide segara ini. Besok ngerjain ini pagi2! ;) Insyaaa Allah!
*** DONE [013] Signin freely, check password. Using hash
*** DONE [011] Signin after signup=> just say success and show link to signin
*** DONE [014] Refine signup checking email existing
** DONE [010] First iteration/POC of Dashboard Development
*** DONE Dashboard Prototyping
*** DONE Apply branch list to dashboard
**** DONE Understanding how to transfer JSON data to Morris.Line method. A daily/weekly/monthly sales of all branches
** [004] Security of API
*** Verifikasi ID dari Client ke Server
   Klien mengirimkan username dan password via json ke server herokuapp
   Server menerima dan mencocokkannya dengan database, mengirimkan json true/false jika benar.
   URL /api/log/in/{username}/{encyrpted password}
** [011] Sempurnakan CRUD paginated table
*** DONE Menggunakan ajax u/ penghapusan data
*** DONE Reload via AJAX
*** Paginasi
*** Search box
** [012] Pengiriman report data transaksi harian
   Bisa dibuat seamless semacam DropBox, atau by action dengan tombol closing and update to server di akhir sesi
   Fokus ke pengaturan sesi terlebih dahulu
* Cloud Concept of FikrPOS
  FikrPOS solution is offer with two plans :
  1. Personal plan
     For single unit of POS system (maybe a small minimarket with only one unit of installation), but still want to manage their system using a computerized POS system. Consisting of a single PC + printer + barcode scanner. Without the need to connect itself to the internet for a Distribution Control system.
  2. Cloud plan 
     This is the case that we dealing with "Koperasi Penjara", where the system consists of a several branches, each with multiple installation of POS sytem, where all the branches need to be managed by a centralized Distribution Center in the internet (=cloud. Here, the term cloud is interchangeably with internet)

     Anytime user can upgrade themself from Personal Plan to Cloud Plan. I create this arrangement, so that we can target a larger audience of user.
** Cloud Plan
   .:. Ini merupakan solusi skala besar / mobility, dengan banyak branches yang membutuhkan manajemen dari suatu Distribution Center terpusat
   User Signup terlebih dahulu dilakukan di cloud, untuk kemudian user bisa mendownload aplikasinya.
** Personal Plan
  
** TODO [013] Refine Session Manajemen : Make it more user friendly
*** TODO Review C# code
** [014] Product and category initialization from Cloud
* Minor Things
** Select navigation of module
* Bug Fixing
** DONE That jquery.pott.. things

